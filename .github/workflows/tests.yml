name: Tests
on:
  pull_request:
  push:
    branches:
      - master

env:
  RUSTUP_MAX_RETRIES: 10
  CARGO_INCREMENTAL: 1
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  test:
    name: Tests
    runs-on: ${{ matrix.cfg.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        cfg:
          - os: macos-latest
            dove: linux-x86_64
          - os: ubuntu-latest
            dove: mac-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: use required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          components: rustfmt
          override: false

      - name: Check formatting
        run: cargo fmt -- --check

      # prepare tests resources
      - name: get dove
        uses: andy-v-h/get-release-asset-action@v1.1.0
        with:
          release: "1.1.1"
          repo: pontem-network/move-tools
          match: "dove.+${{ matrix.cfg.dove }}.*$"
          rename: dove
      - name: set executable permissions
        run: sudo chown runner ./dove && chmod +x ./dove
      - name: move dove to bins dir
        run: mv ./dove ~/.cargo/bin/dove

      - name: Tests
        run: cargo +${{ steps.rust.outputs.version }} test --all --no-fail-fast -- --nocapture --test-threads=1
        env: { SKIP_WASM_BUILD: 1 }

  clippy:
    name: Clippy
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: use required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          components: clippy
          target: wasm32-unknown-unknown
          override: true

      - name: Clippy
        # uses: actions-rs/clippy-check@v1
        # with:
        #   name: Clippy report
        #   toolchain: ${{ steps.rust.outputs.version }}
        #   token: ${{ secrets.GITHUB_TOKEN }}
        #   args: -p=sp-mvm --target=wasm32-unknown-unknown --no-default-features
        run: |
          pushd pallets/sp-mvm
          cargo clippy -p=sp-mvm --target=wasm32-unknown-unknown --no-default-features
          popd
        env: { SKIP_WASM_BUILD: 1 }

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: true
      matrix:
        os:
          - macos-latest
          - ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: rust # MSRV
        name: use required Rust version
        run: |
          echo "WASM_BUILD_TOOLCHAIN=$(cat rust-toolchain)" >> $GITHUB_ENV
          echo ::set-output name=version::$(cat rust-toolchain)

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ steps.rust.outputs.version }}
          profile: minimal
          target: wasm32-unknown-unknown
          override: false

      - name: Build
        run: cargo +${{ steps.rust.outputs.version }} build --all
